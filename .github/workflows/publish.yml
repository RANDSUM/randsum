name: Publish + Release
on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Bun
        uses: oven-sh/setup-bun@v1

      - name: Install deps
        run: bun run install:all

      - name: Build
        run: bun run build:all

      - name: Setup .npmrc
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          echo "access=public" >> .npmrc

      # Store initial versions
      - name: Get initial versions
        id: initial_versions
        run: |
          echo "CORE_VERSION=$(node -p "require('./packages/core/package.json').version")" >> $GITHUB_ENV
          echo "DICE_VERSION=$(node -p "require('./packages/dice/package.json').version")" >> $GITHUB_ENV
          echo "NOTATION_VERSION=$(node -p "require('./packages/notation/package.json').version")" >> $GITHUB_ENV

      # Publish packages in dependency order
      - name: Publish core
        run: cd packages/core && bun publish --no-git-checks || echo "No core changes to publish"

      - name: Publish notation
        run: cd packages/notation && bun publish --no-git-checks || echo "No notation changes to publish"

      - name: Publish dice
        run: cd packages/dice && bun publish --no-git-checks || echo "No dice changes to publish"

      # Get final versions after publish
      - name: Get final versions
        id: final_versions
        run: |
          echo "NEW_CORE_VERSION=$(node -p "require('./packages/core/package.json').version")" >> $GITHUB_ENV
          echo "NEW_DICE_VERSION=$(node -p "require('./packages/dice/package.json').version")" >> $GITHUB_ENV
          echo "NEW_NOTATION_VERSION=$(node -p "require('./packages/notation/package.json').version")" >> $GITHUB_ENV

      # Create release if any package was published
      - name: Create Release
        if: env.CORE_VERSION != env.NEW_CORE_VERSION || env.DICE_VERSION != env.NEW_DICE_VERSION || env.NOTATION_VERSION != env.NEW_NOTATION_VERSION
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ github.sha }}
          name: Release ${{ github.sha }}
          body: |
            ## Package Updates

            ${{ env.CORE_VERSION != env.NEW_CORE_VERSION && format('### @randsum/core: {0} → {1}', env.CORE_VERSION, env.NEW_CORE_VERSION) || '' }}
            ${{ env.DICE_VERSION != env.NEW_DICE_VERSION && format('### @randsum/dice: {0} → {1}', env.DICE_VERSION, env.NEW_DICE_VERSION) || '' }}
            ${{ env.NOTATION_VERSION != env.NEW_NOTATION_VERSION && format('### @randsum/notation: {0} → {1}', env.NOTATION_VERSION, env.NEW_NOTATION_VERSION) || '' }}

            See commit history for detailed changes.
