name: Publish + Release
on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Bun
        uses: oven-sh/setup-bun@v1

      - name: Install deps
        run: bun install

      - name: Build
        run: bun run build:all

      - name: Setup .npmrc
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          echo "access=public" >> .npmrc

      # Core Package
      - name: Get Core initial version
        id: core_initial
        run: echo "version=$(node -p "require('./packages/core/package.json').version")" >> $GITHUB_OUTPUT

      - name: Publish Core
        id: publish_core
        continue-on-error: true
        run: |
          cd packages/core
          if bun publish --no-git-checks; then
            echo "published=true" >> $GITHUB_OUTPUT
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "published=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Core Release
        if: steps.publish_core.outputs.published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: core-${{ steps.publish_core.outputs.version }}
          name: "@randsum/core v${{ steps.publish_core.outputs.version }}"
          generate_release_notes: true

      # Notation Package
      - name: Get Notation initial version
        id: notation_initial
        run: echo "version=$(node -p "require('./packages/notation/package.json').version")" >> $GITHUB_OUTPUT

      - name: Publish Notation
        id: publish_notation
        continue-on-error: true
        run: |
          cd packages/notation
          if bun publish --no-git-checks; then
            echo "published=true" >> $GITHUB_OUTPUT
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "published=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Notation Release
        if: steps.publish_notation.outputs.published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: notation-${{ steps.publish_notation.outputs.version }}
          name: "@randsum/notation v${{ steps.publish_notation.outputs.version }}"
          generate_release_notes: true

      # Dice Package
      - name: Get Dice initial version
        id: dice_initial
        run: echo "version=$(node -p "require('./packages/dice/package.json').version")" >> $GITHUB_OUTPUT

      - name: Publish Dice
        id: publish_dice
        continue-on-error: true
        run: |
          cd packages/dice
          if bun publish --no-git-checks; then
            echo "published=true" >> $GITHUB_OUTPUT
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          else
            echo "published=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Dice Release
        if: steps.publish_dice.outputs.published == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: dice-${{ steps.publish_dice.outputs.version }}
          name: "@randsum/dice v${{ steps.publish_dice.outputs.version }}"
          generate_release_notes: true
