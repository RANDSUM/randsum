name: Publish + Release
on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lock') }}

      - name: Install deps
        run: bun run install:all

      - name: Build
        run: bun run build:all

      - name: Setup .npmrc
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          echo "access=public" >> .npmrc

      # Get current versions
      - name: Get current versions
        id: versions
        run: |
          echo "core_old_version=$(node -p "require('./packages/core/package.json').version")" >> $GITHUB_OUTPUT
          echo "dice_old_version=$(node -p "require('./packages/dice/package.json').version")" >> $GITHUB_OUTPUT
          echo "notation_old_version=$(node -p "require('./packages/notation/package.json').version")" >> $GITHUB_OUTPUT

      # Publish packages in order: core -> dice/notation
      - name: Publish packages
        id: publish
        run: |
          cd packages/core && bun publish --no-git-checks || true
          cd ../notation && bun publish --no-git-checks || true
          cd ../dice && bun publish --no-git-checks || true

      # Get new versions
      - name: Get new versions
        id: new_versions
        run: |
          echo "core_new_version=$(node -p "require('./packages/core/package.json').version")" >> $GITHUB_OUTPUT
          echo "notation_new_version=$(node -p "require('./packages/notation/package.json').version")" >> $GITHUB_OUTPUT
          echo "dice_new_version=$(node -p "require('./packages/dice/package.json').version")" >> $GITHUB_OUTPUT

      # Create GitHub Release if any package was published
      - name: Create Release
        if: steps.versions.outputs.core_old_version != steps.new_versions.outputs.core_new_version || steps.versions.outputs.dice_old_version != steps.new_versions.outputs.dice_new_version || steps.versions.outputs.notation_old_version != steps.new_versions.outputs.notation_new_version
        id: release
        uses: softprops/action-gh-release@HEAD
        with:
          tag_name: ${{ steps.versions.outputs.core_old_version != steps.new_versions.outputs.core_new_version && format('core-v{0}', steps.new_versions.outputs.core_new_version) || steps.versions.outputs.dice_old_version != steps.new_versions.outputs.dice_new_version && format('dice-v{0}', steps.new_versions.outputs.dice_new_version) || format('notation-v{0}', steps.new_versions.outputs.notation_new_version) }}
          append_body: true
          generate_release_notes: true
          body: |
            ## Changes in this Release

            ${{ steps.versions.outputs.core_old_version != steps.new_versions.outputs.core_new_version && format('### @randsum/core v{0}', steps.new_versions.outputs.core_new_version) || '' }}
            ${{ steps.versions.outputs.core_old_version != steps.new_versions.outputs.core_new_version && '- Package updated' || '' }}

            ${{ steps.versions.outputs.dice_old_version != steps.new_versions.outputs.dice_new_version && format('### @randsum/dice v{0}', steps.new_versions.outputs.dice_new_version) || '' }}
            ${{ steps.versions.outputs.dice_old_version != steps.new_versions.outputs.dice_new_version && '- Package updated' || '' }}

            ${{ steps.versions.outputs.notation_old_version != steps.new_versions.outputs.notation_new_version && format('### @randsum/notation v{0}', steps.new_versions.outputs.notation_new_version) || '' }}
            ${{ steps.versions.outputs.notation_old_version != steps.new_versions.outputs.notation_new_version && '- Package updated' || '' }}
