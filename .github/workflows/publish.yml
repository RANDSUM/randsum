name: Publish + Release
on:
  workflow_run:
    workflows: [CI]
    types: [completed]
    branches: [main]

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    env:
      NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Use Bun
        uses: oven-sh/setup-bun@v1

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/bun.lock') }}

      - name: Install deps
        run: bun run install:all

      - name: Build
        run: bun run build:all

      - name: Setup .npmrc
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > .npmrc
          echo "access=public" >> .npmrc

      # Get current versions
      - name: Get current versions
        id: versions
        run: |
          echo "core_old_version=$(node -p "require('./packages/core/package.json').version")" >> $GITHUB_OUTPUT
          echo "dice_old_version=$(node -p "require('./packages/dice/package.json').version")" >> $GITHUB_OUTPUT
          echo "notation_old_version=$(node -p "require('./packages/notation/package.json').version")" >> $GITHUB_OUTPUT

      # Publish packages in order: core -> dice/notation
      - name: Publish packages
        id: publish
        run: |
          cd packages/core && bun publish --no-git-checks || true
          cd ../notation && bun publish --no-git-checks || true
          cd ../dice && bun publish --no-git-checks || true

      # Get new versions
      - name: Get new versions
        id: new_versions
        run: |
          echo "core_new_version=$(node -p "require('./packages/core/package.json').version")" >> $GITHUB_OUTPUT
          echo "notation_new_version=$(node -p "require('./packages/notation/package.json').version")" >> $GITHUB_OUTPUT
          echo "dice_new_version=$(node -p "require('./packages/dice/package.json').version")" >> $GITHUB_OUTPUT

      # Add a step to check if versions changed
      - name: Check version changes
        id: check_versions
        run: |
          if [ "$CORE_VERSION" != "$NEW_CORE_VERSION" ] || \
             [ "$DICE_VERSION" != "$NEW_DICE_VERSION" ] || \
             [ "$NOTATION_VERSION" != "$NEW_NOTATION_VERSION" ]; then
            echo "versions_changed=true" >> $GITHUB_OUTPUT
          else
            echo "versions_changed=false" >> $GITHUB_OUTPUT
          fi

      # Create GitHub Release if any package was published
      - name: Create Release
        if: steps.check_versions.outputs.versions_changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ github.sha }}
          name: Release ${{ github.sha }}
          body: |
            ## Package Updates

            ${{ env.CORE_VERSION != env.NEW_CORE_VERSION && format('### @randsum/core: {0} → {1}', env.CORE_VERSION, env.NEW_CORE_VERSION) || '' }}
            ${{ env.DICE_VERSION != env.NEW_DICE_VERSION && format('### @randsum/dice: {0} → {1}', env.DICE_VERSION, env.NEW_DICE_VERSION) || '' }}
            ${{ env.NOTATION_VERSION != env.NEW_NOTATION_VERSION && format('### @randsum/notation: {0} → {1}', env.NOTATION_VERSION, env.NEW_NOTATION_VERSION) || '' }}

            See commit history for detailed changes.
