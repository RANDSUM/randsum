# RANDSUM Monorepo Guidelines

## Project Architecture & Structure

- This is a TypeScript monorepo using Moon build orchestrator and Bun runtime/package manager
- Use ESM modules exclusively (`"type": "module"` in package.json)
- Organize packages into three categories:
  - `packages/` - Core packages (core, dice, notation)
  - `gamePackages/` - Game system implementations (5e, blades, root-rpg, etc.)
  - `internalPackages/` - Internal utilities (currently only core)
- Each package follows the structure: `src/`, `__tests__/`, `dist/` (generated), `package.json`, `README.md`, `moon.yml`
- Use workspace dependencies with `workspace:~` syntax for internal package references

## Build System & Tooling

- Use Moon for task orchestration and dependency management
- Use Bun for JavaScript runtime, package manager, and testing
- Build with `bunup` tool: `bunup --entry src/index.ts -o dist --format esm,cjs -m -d -s -t node -c`
- All packages must have these Moon tasks: build, test, lint, tsCheck, publish, ci
- Game packages depend on dice package: include `dependsOn: ['dice']` in moon.yml
- Use consistent task dependencies: test/lint/tsCheck depend on build
- Enable caching for all tasks with `options: { cache: true }`

## Code Style & Conventions

- Use 2 spaces for indentation
- Use semicolons
- Use single quotes for strings
- Follow existing TypeScript strict configuration
- Use ESLint with typescript-eslint recommended, strict, and stylistic configs
- Use Prettier for code formatting
- File naming: camelCase for TypeScript files, kebab-case for directories
- Class names: PascalCase (e.g., BaseModifier, CapModifier)
- Function names: camelCase starting with verbs (e.g., roll5e, generateQuantity)
- Type names: PascalCase with descriptive suffixes (e.g., RollOptions, NumericRollResult)
- Interface names: PascalCase without 'I' prefix

## TypeScript Patterns

- Use strict TypeScript configuration with all strict checks enabled
- Prefer interfaces over types for object shapes
- Use discriminated union types extensively for type safety
- Use union types for game-specific enums (e.g., 'Advantage' | 'Disadvantage')
- Export types and interfaces alongside implementations
- Use type guards for runtime type checking (e.g., isNumericRollOptions)
- Prefer readonly properties for immutable data structures
- Use template literal types for string patterns where appropriate
- NEVER use `any`
- NEVER use `as` for type assertions

## Package Organization & Dependencies

- Core package (@randsum/core) contains shared utilities, types, and modifiers
- Dice package (@randsum/dice) is the main implementation, depends on core
- Notation package (@randsum/notation) handles dice notation parsing, depends on core
- Game packages depend only on dice package, not core directly
- Re-export all necessary types from dependencies in each package's index.ts
- Use barrel exports (index.ts files) to organize exports by category
- Mark internal packages as `"private": true` in package.json
- Use consistent package.json structure with proper exports field for dual ESM/CJS

## Testing Patterns

- Use Bun test framework exclusively
- Test files in `__tests__/` directories with `.test.ts` extension
- Import test utilities from 'bun:test': describe, expect, test, mock, spyOn
- Use consistent test structure: describe blocks for grouping, descriptive test names
- Test coverage configuration in bunfig.toml with thresholds: lines=1.0, branches=0.8, statements=0.8
- Mock external dependencies and random functions for deterministic tests
- Create helper functions for common test patterns (e.g., createRollParameters)
- Test both happy path and error conditions
- Use type assertions in tests to verify TypeScript types

## Documentation Standards

- Use JSDoc comments for all public APIs with @param, @returns, @example tags
- Include @file and @module tags at the top of each file
- Write comprehensive README.md for each package with installation, usage, and API reference
- Use consistent README structure: description, features, installation, usage, API reference
- Include TypeScript code examples in documentation
- Use emoji in README headers for visual appeal (ðŸŽ², ðŸŽ¯, ðŸ”’, ðŸª¶)
- Document complex algorithms and business logic with inline comments
- Prefer dark themes for documentation sites
- Use syntax highlighting for code blocks in documentation

## Dice Rolling & Game System Patterns

- All dice rolling functions should return detailed result objects with sum, rolls, notation
- Use modifier system from core package for dice roll modifications
- Game system functions should follow naming pattern: roll[GameName] (e.g., roll5e, rollBlades)
- Implement advantage/disadvantage as drop modifiers (drop lowest/highest)
- Use consistent parameter patterns: options objects with optional modifiers
- Return game-specific result types that extend base roll results
- Include human-readable descriptions in roll results
- Use type-safe enums for game-specific outcomes (e.g., 'Strong Hit' | 'Weak Hit' | 'Miss')
- Implement meet-or-beat functions for target number systems
- Use consistent error handling with custom error classes (e.g., InvalidUniqueError)

## Error Handling

- Create custom error classes that extend Error for domain-specific errors
- Use descriptive error messages that help users understand the problem
- Validate input parameters and throw appropriate errors for invalid inputs
- Handle edge cases gracefully (e.g., impossible unique roll configurations)
- Use type guards to prevent runtime type errors
- Document error conditions in JSDoc comments

## Performance & Bundle Size

- Prioritize tree-shakeable exports and minimal bundle size
- Use dynamic imports for large dependencies when possible
- Avoid circular dependencies between packages
- Use efficient algorithms for dice rolling and statistical calculations
- Cache expensive computations where appropriate
- Mark packages as side-effect free with `"sideEffects": false`

## Development Workflow

- Use Moon commands for all development tasks: `bun moon :build`, `bun moon :test`, etc.
- Run type checking with `bun moon :tsCheck` before committing
- Use `bun moon :lint` for code quality checks
- Target individual packages with `moon [package]:task` syntax
- Use workspace commands for monorepo-wide operations
- Maintain consistent versioning across all packages
- Use semantic versioning for releases

## Game System Implementation Guidelines

- Each game system should have its own package in gamePackages/
- Implement core rolling mechanics specific to that game system
- Include relevant tables and reference data as needed
- Use TypeScript for type safety of game-specific data structures
- Follow the pattern of exporting main roll function and result types
- Include comprehensive examples in README showing typical usage patterns
- Implement helper functions for common game mechanics (advantage, critical hits, etc.)

## Module Organization & Exports

- Use barrel exports in index.ts files to organize exports by category
- Group exports with comments: "Die classes", "Main rolling function", "Type exports"
- Re-export all necessary types from dependencies to avoid deep imports
- Use consistent export patterns: export classes/functions directly, export types separately
- Organize utility functions in utils/ subdirectories with their own index.ts
- Use descriptive file names that match their primary export (e.g., roll5e.ts exports roll5e)

## Modifier System Patterns

- All modifiers extend BaseModifier<T> abstract class
- Implement static pattern property for regex matching dice notation
- Implement static parse method to extract options from notation strings
- Use consistent modifier naming: [Action]Modifier (e.g., DropModifier, ExplodeModifier)
- Modifiers should be pure functions that transform roll bonuses
- Include toDescription() and toNotation() methods for human-readable output
- Use formatters utility for consistent description formatting

## Random Number Generation

- Use coreRandom function for all random number generation
- Support seeded random for testing with createSeededRandom
- Generate numerical faces with generateNumericalFaces utility
- Use coreSpreadRolls for generating arrays of roll results
- Mock random functions in tests for deterministic behavior

## Validation & Type Safety

- Use validation functions for dice notation parsing
- Return detailed validation results with success/failure and error messages
- Use type predicates for runtime type checking
- Validate roll options before processing (e.g., unique roll constraints)
- Use branded types or nominal typing where appropriate for domain concepts

## Memory & User Preferences

- User prefers documentation sites with syntax highlighting for code blocks
- User prefers dark theme for GitHub Pages documentation
- User prefers separate Core Packages and Game Systems sections in documentation
- Game Systems documentation should link to respective game system tables
- User prefers abstracting shared testing patterns into internalPackages/core
- User prefers bun-native solutions over Python for development tasks
- User prefers package managers over manual package.json editing

## Anti-Patterns to Avoid

- Do not manually edit package.json files - use package managers (bun add, bun remove)
- Do not create circular dependencies between packages
- Do not use CommonJS modules - stick to ESM
- Do not skip type checking or linting in CI/CD
- Do not use any or unknown types without justification
- Do not create deep import paths - use barrel exports
- Do not duplicate testing utilities - abstract to internalPackages/core
- Do not use Python tools when bun-native alternatives exist

## Naming Conventions Summary

- Packages: kebab-case (@randsum/root-rpg)
- Directories: kebab-case (gamePackages, __tests__)
- Files: camelCase (.ts), kebab-case (README.md)
- Classes: PascalCase (BaseModifier)
- Functions: camelCase with verb prefix (rollBlades, generateQuantity)
- Variables: camelCase (rollResult, dicePool)
- Constants: SCREAMING_SNAKE_CASE (CORE_NOTATION_PATTERN)
- Types/Interfaces: PascalCase with descriptive suffix (RollOptions, NumericRollResult)
- Enums: PascalCase values ('Advantage', 'Disadvantage')

## Configuration File Patterns

- Use bunfig.toml for test configuration with consistent coverage thresholds
- Use moon.yml for project configuration with proper dependencies
- Use eslint.config.js with typescript-eslint strict configuration
- Use tsconfig.json with strict TypeScript settings
- Include proper .gitignore patterns for dist/, node_modules/, coverage/
- Use .prototools for toolchain version management

## Code Quality & Standards

- NEVER use `any` type - use proper TypeScript types
- NEVER use `as` for type assertions - use type guards instead
- Always use strict TypeScript configuration with all checks enabled
- Use readonly properties for immutable data structures
- Implement proper error boundaries and error handling
- Use descriptive variable and function names that explain intent
- Write self-documenting code with clear business logic
- Follow single responsibility principle for functions and classes

## Import/Export Patterns

- Use named imports/exports over default exports for better tree-shaking
- Group imports by category: external libraries, internal packages, relative imports
- Use consistent import ordering: libraries first, then internal packages, then relative
- Avoid deep import paths - use barrel exports from package index files
- Re-export types from dependencies to prevent consumers from deep importing
- Use type-only imports when importing only types: `import type { ... }`

## Testing Best Practices

- Create helper functions for common test patterns (e.g., createRollParameters)
- Use descriptive test names that explain what is being tested
- Test both success and failure scenarios
- Mock external dependencies for isolated unit tests
- Use type assertions in tests to verify TypeScript type correctness
- Group related tests with describe blocks
- Use beforeAll/afterAll for test setup and cleanup when needed
- Maintain high test coverage with meaningful tests, not just coverage targets
